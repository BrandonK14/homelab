name: Install ArgoCD
on:
  workflow_dispatch:
env:
  KUBECONFIG: ${{ secrets.KUBECONFIG }}      # path only, not "export ..."
  HOMELAB_REPO: ${{ secrets.HOMELAB_REPO }}

jobs:
  argo-ns-creation:
    runs-on: self-hosted
    steps:
      - name: Create argocd k3s namespace
        run: |
          set -euxo pipefail
          export KUBECONFIG="$KUBECONFIG"
          env | grep KUBECONFIG
          kubectl create namespace argocd
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

  install-argo:
    needs: argo-ns-creation
    runs-on: self-hosted
    steps:
      - name: Install ArgoCD
        run: |
          set -euxo pipefail
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64
          
  argo-svc-nodeport:
    needs: [argo-ns-creation, install-argo]
    runs-on: self-hosted
    steps:
      - name: K3s port forwarding
        run: |
          set -euxo pipefail
          export KUBECONFIG="$KUBECONFIG"
          kubectl patch service argocd-server -n argocd --type merge -p '{"spec":{"type":"NodePort"}}'

  argo-store-secret:
    needs: [argo-ns-creation, install-argo, argo-svc-nodeport]
    runs-on: self-hosted
    steps:
      - name: Secret store
        run: |
          set -euxo pipefail
          export KUBECONFIG="$KUBECONFIG"
          { set +x; } 2>/dev/null #quiet next command
          PASS="$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath='{.data.password}' | base64 -d)"
          { set -x; } 2>/dev/null #verbose logging output again
          echo "::add-mask::$PASS"
          gh secret set ARGOCD_ADMIN_PASSWORD --repo "$HOMELAB_REPO" --body "$PASS"
       
          
